// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NFTSold extends ethereum.Event {
  get params(): NFTSold__Params {
    return new NFTSold__Params(this);
  }
}

export class NFTSold__Params {
  _event: NFTSold;

  constructor(event: NFTSold) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _nftAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class NFTlisted extends ethereum.Event {
  get params(): NFTlisted__Params {
    return new NFTlisted__Params(this);
  }
}

export class NFTlisted__Params {
  _event: NFTlisted;

  constructor(event: NFTlisted) {
    this._event = event;
  }

  get _NFTContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class listDeleted extends ethereum.Event {
  get params(): listDeleted__Params {
    return new listDeleted__Params(this);
  }
}

export class listDeleted__Params {
  _event: listDeleted;

  constructor(event: listDeleted) {
    this._event = event;
  }

  get _NFTContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class withdrawSuccess extends ethereum.Event {
  get params(): withdrawSuccess__Params {
    return new withdrawSuccess__Params(this);
  }
}

export class withdrawSuccess__Params {
  _event: withdrawSuccess;

  constructor(event: withdrawSuccess) {
    this._event = event;
  }

  get _to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NFTmarketplace extends ethereum.SmartContract {
  static bind(address: Address): NFTmarketplace {
    return new NFTmarketplace("NFTmarketplace", address);
  }

  getAccountBalance(account: Address): BigInt {
    let result = super.call(
      "getAccountBalance",
      "getAccountBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getAccountBalance(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAccountBalance",
      "getAccountBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNFTLister(_NFTContract: Address, _tokenId: BigInt): Address {
    let result = super.call(
      "getNFTLister",
      "getNFTLister(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_NFTContract),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toAddress();
  }

  try_getNFTLister(
    _NFTContract: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getNFTLister",
      "getNFTLister(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_NFTContract),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNFTPrice(_NFTContract: Address, _tokenId: BigInt): BigInt {
    let result = super.call(
      "getNFTPrice",
      "getNFTPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_NFTContract),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getNFTPrice(
    _NFTContract: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNFTPrice",
      "getNFTPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_NFTContract),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BuyItemCall extends ethereum.Call {
  get inputs(): BuyItemCall__Inputs {
    return new BuyItemCall__Inputs(this);
  }

  get outputs(): BuyItemCall__Outputs {
    return new BuyItemCall__Outputs(this);
  }
}

export class BuyItemCall__Inputs {
  _call: BuyItemCall;

  constructor(call: BuyItemCall) {
    this._call = call;
  }

  get _NFTContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyItemCall__Outputs {
  _call: BuyItemCall;

  constructor(call: BuyItemCall) {
    this._call = call;
  }
}

export class DeleteListingCall extends ethereum.Call {
  get inputs(): DeleteListingCall__Inputs {
    return new DeleteListingCall__Inputs(this);
  }

  get outputs(): DeleteListingCall__Outputs {
    return new DeleteListingCall__Outputs(this);
  }
}

export class DeleteListingCall__Inputs {
  _call: DeleteListingCall;

  constructor(call: DeleteListingCall) {
    this._call = call;
  }

  get _NFTContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DeleteListingCall__Outputs {
  _call: DeleteListingCall;

  constructor(call: DeleteListingCall) {
    this._call = call;
  }
}

export class ListItemCall extends ethereum.Call {
  get inputs(): ListItemCall__Inputs {
    return new ListItemCall__Inputs(this);
  }

  get outputs(): ListItemCall__Outputs {
    return new ListItemCall__Outputs(this);
  }
}

export class ListItemCall__Inputs {
  _call: ListItemCall;

  constructor(call: ListItemCall) {
    this._call = call;
  }

  get _NFTContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ListItemCall__Outputs {
  _call: ListItemCall;

  constructor(call: ListItemCall) {
    this._call = call;
  }
}

export class UpdateListingCall extends ethereum.Call {
  get inputs(): UpdateListingCall__Inputs {
    return new UpdateListingCall__Inputs(this);
  }

  get outputs(): UpdateListingCall__Outputs {
    return new UpdateListingCall__Outputs(this);
  }
}

export class UpdateListingCall__Inputs {
  _call: UpdateListingCall;

  constructor(call: UpdateListingCall) {
    this._call = call;
  }

  get _NFTContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateListingCall__Outputs {
  _call: UpdateListingCall;

  constructor(call: UpdateListingCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
